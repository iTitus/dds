plugins {
    id 'org.openjfx.javafxplugin'
}

dependencies {
    api project(':ddsiio')
}

javafx {
    version = '21.0.6'
    modules = ['javafx.graphics']
    configurations = ['compileOnly', 'testImplementation']
}

tasks.withType(JavaCompile) {
    moduleOptions {
        addExports = [
                'javafx.graphics/com.sun.javafx.iio'       : 'io.github.ititus.ddsfx',
                'javafx.graphics/com.sun.javafx.iio.common': 'io.github.ititus.ddsfx'
        ]
    }
}

tasks.withType(Javadoc) {
    moduleOptions {
        addExports = [
                'javafx.graphics/com.sun.javafx.iio'       : 'io.github.ititus.ddsfx',
                'javafx.graphics/com.sun.javafx.iio.common': 'io.github.ititus.ddsfx'
        ]
    }
}

tasks.withType(Test) {
    moduleOptions {
        addExports = [
                'javafx.graphics/com.sun.javafx.iio'       : 'io.github.ititus.ddsfx',
                'javafx.graphics/com.sun.javafx.iio.common': 'io.github.ititus.ddsfx'
        ]
    }
}

publishing {
    publications {
        MyPublication(MavenPublication) {
            pom {
                name = 'DDS FX Reader'
                packaging = 'jar'
                description = 'DDS Image Library for JavaFX'
                url = 'https://github.com/iTitus/dds'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://mit-license.org'
                    }
                }
                developers {
                    developer {
                        id = 'iTitus'
                        name = 'iTitus'
                        email = 'ititus@users.noreply.github.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/iTitus/dds.git'
                    developerConnection = 'scm:git:ssh://git@github.com:iTitus/dds.git'
                    url = 'https://github.com/iTitus/dds'
                    tag = "v${version}"
                }
            }

            from components.java
        }
    }
}

signing {
    def signingKey = findProperty('signing_key')
    def signingPassword = findProperty('signing_password')
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.MyPublication
}
